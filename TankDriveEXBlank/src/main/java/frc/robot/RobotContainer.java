package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;

/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */

public class RobotContainer {
private static RobotContainer m_robotContainer = new RobotContainer();

// The robot's subsystems
    public final Drive m_drive = new Drive();

// Joysticks
private final XboxController operatorJoystick = new XboxController(1);
private final Joystick driverJoystick = new Joystick(0);



  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */

  private RobotContainer() {

    //SmartDashboard declarations
    //ex:
    //    SmartDashboard.putData("name", new Command( m_subsystem ));


    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    m_drive.setDefaultCommand(new DriveArcade( m_drive ) );

    // Configure autonomous sendable chooser
        
    //declare auton here
    

        SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }
  
 //configure button bindings below here
  private void configureButtonBindings() {
    /* ex
final JoystickButton liftDownButton = new JoystickButton(operatorJoystick, XboxController.Button.kA.value);        
liftDownButton.whileHeld(new LiftStartDown( m_lift ) ,true);
    SmartDashboard.putData("LiftDownButton",new LiftStartDown( m_lift ) );
    */
  }

public Joystick getdriverJoystick() {
        return driverJoystick;
    }

public XboxController getoperatorJoystick() {
      return operatorJoystick;
    }

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */

public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
  return m_chooser.getSelected();
}

  //functions here
  /* ex:
  public double getTv(){
    return NetworkTableInstance.getDefault().getTable("limelight").getEntry("tv").getDouble(0);
    //NetworkTableEntry tv = table.getEntry("tv");
    //return tv.getBoolean(false);
  }
  */
  

}

